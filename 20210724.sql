SELECT * FROM STORE_INFORMATION
ORDER BY STORE_NAME, SALES;


SELECT STORE_NAME,sum(sales) FROM STORE_INFORMATION
GROUP BY STORE_NAME;

-- group by 群組 合併指定函數
SELECT STORE_NAME,sales FROM STORE_INFORMATION
GROUP BY STORE_NAME,sales;
-- distinct 只做資料去重複
SELECT DISTINCT(STORE_NAME) FROM STORE_INFORMATION;


SELECT STORE_NAME,sum(sales),count(STORE_NAME),AVG(sales),MAX(sales),MIN(sales) from STORE_INFORMATION
GROUP BY STORE_NAME;


-- 想要查詢資料 group by 群組合併前的資料清單
SELECT STORE_NAME,count(STORE_NAME),sum(sales),
	group_concat(SALES ORDER BY SALES DESC SEPARATOR'/')
from STORE_INFORMATION
GROUP BY STORE_NAME;


-- "雙引號“ 用在別名  ‘單引號’用在欄位字串
SELECT STORE_NAME,sum(sales) as "sum_sales" from STORE_INFORMATION
GROUP BY STORE_NAME
having sum(sales)>= 3000 ;

SELECT STORE_NAME from STORE_INFORMATION
where STORE_NAME = 'Boston';

-- as 別名語法可省略
SELECT STORE_NAME,sum(sales)  "sum_sales" from STORE_INFORMATION
GROUP BY STORE_NAME
having sum(sales)>= 3000 ;

-- 表格別名不需加雙引號
SELECT STORE.STORE_NAME, STORE.SALES from STORE_INFORMATION STORE;


SELECT * from STORE_INFORMATION;
SELECT * from GEOGRAPHY;


SELECT G.GEOGRAPHY_ID, G.REGION_NAME, S.STORE_ID,S.STORE_NAME,S.SALES
from STORE_INFORMATION S,GEOGRAPHY G
where G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- INNER JOIN 必須搭配 on 做資料連接  inner 語法可省略
SELECT G.GEOGRAPHY_ID, G.REGION_NAME, S.STORE_ID,S.STORE_NAME,S.SALES
from STORE_INFORMATION S INNER JOIN GEOGRAPHY G
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

SELECT G.GEOGRAPHY_ID, G.REGION_NAME, S.STORE_ID,S.STORE_NAME,S.SALES
from STORE_INFORMATION S INNER JOIN GEOGRAPHY G
USING (GEOGRAPHY_ID);

SELECT G.GEOGRAPHY_ID, G.REGION_NAME, S.STORE_ID,S.STORE_NAME,S.SALES
from GEOGRAPHY G left JOIN  STORE_INFORMATION S 
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

SELECT G.GEOGRAPHY_ID, G.REGION_NAME, S.STORE_ID,S.STORE_NAME,S.SALES
from GEOGRAPHY G right JOIN  STORE_INFORMATION S 
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

SELECT G.GEOGRAPHY_ID, G.REGION_NAME, S.STORE_ID,S.STORE_NAME,S.SALES
from GEOGRAPHY G left JOIN  STORE_INFORMATION S 
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
UNION
SELECT G.GEOGRAPHY_ID, G.REGION_NAME, S.STORE_ID,S.STORE_NAME,S.SALES
from GEOGRAPHY G right JOIN  STORE_INFORMATION S 
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

SELECT STORE_NAME, sum(SALES) SUM_SALES, count(STORE_NAME) COUNT_STORE,avg(SALES) AVG_SALES from STORE_INFORMATION
group by STORE_NAME
having AVG_SALES> 1000 and COUNT_STORE> 1
order by AVG_SALES DESC ;

SELECT  G.REGION_NAME,IFNULL(SUM(S.SALES),0) SUM_SALES
from GEOGRAPHY G LEFT JOIN  STORE_INFORMATION S 
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
group by G.REGION_NAME
ORDER BY SUM_SALES DESC;

SELECT  G.REGION_NAME,COUNT(DISTINCT(STORE_NAME)) STORE_COUNT
from GEOGRAPHY G LEFT JOIN  STORE_INFORMATION S 
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
group by G.REGION_NAME
ORDER BY STORE_COUNT DESC;

-- step 1 找出所有欄位所在的資料表
-- 1.所在地(國家、洲省、城市)
-- (location) country_ID, CITY, STATE_PROVINCE
-- 2.部門(部門編號、部門名稱)
-- (DEPARTMENTS) DEPARTMENT_ID, DEPARTMENT_NAME
-- 3.部門管理者(員工編號、員工姓名、員工職稱)
-- (EMPLOYEE) EMPLOYEE_ID, FIRST_NAME
-- (JOBS) JOB_TITLE

-- step 2 找資料表與資料表之間的關聯欄位
-- locations (location_id) departments
-- departments (manager_id = employee_id) employees
-- employees(job_id) jobs

SELECT * FROM DEPARTMENTS;
SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID = '10';

SELECT L.COUNTRY_ID,L.STATE_PROVINCE,L.CITY, D.DEPARTMENT_ID,D.DEPARTMENT_NAME
from DEPARTMENTS D  LEFT JOIN  LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID;

(SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME,E.EMPLOYEE_ID,E.FIRST_NAME
from DEPARTMENTS D LEFT Join EMPLOYEES E
on D.MANAGER_ID = E.EMPLOYEE_ID);

SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME,E.EMPLOYEE_ID,E.FIRST_NAME
    from DEPARTMENTS D LEFT Join EMPLOYEES E
    on D.MANAGER_ID = E.EMPLOYEE_ID;



SELECT L.COUNTRY_ID,L.STATE_PROVINCE,L.CITY, ID.DEPARTMENT_ID,ID.DEPARTMENT_NAME,ID.EMPLOYEE_ID,ID.FIRST_NAME
from LOCATIONS L  LEFT JOIN 
	(SELECT D.LOCATION_ID,D.DEPARTMENT_ID, D.DEPARTMENT_NAME,E.EMPLOYEE_ID,E.FIRST_NAME
    from DEPARTMENTS D  LEFT Join EMPLOYEES E
    on D.MANAGER_ID = E.EMPLOYEE_ID) as ID
ON L.LOCATION_ID = ID.LOCATION_ID;


SELECT (CASE when D.MANAGER_ID  IS NULL  then '200' end) as MANAGER_ID
from DEPARTMENTS D ;

SELECT L.COUNTRY_ID,L.STATE_PROVINCE,L.CITY, D.DEPARTMENT_ID,D.DEPARTMENT_NAME,E.EMPLOYEE_ID,E.FIRST_NAME,J.JOB_TITLE
from DEPARTMENTS D   JOIN  LOCATIONS L 
ON L.LOCATION_ID =  D.LOCATION_ID 
LEFT JOIN EMPLOYEES E
ON D.MANAGER_ID = E.EMPLOYEE_ID 
left JOIN JOBS J
ON E.JOB_ID = J.JOB_ID;





